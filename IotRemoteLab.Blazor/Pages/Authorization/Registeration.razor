@layout AuthorizationLayout
@page "/register"

@using IotRemoteLab.Blazor.Models
@using IotRemoteLab.Blazor.Services
@using System.Text.RegularExpressions

<div class="authContainer">
	<div class="authWrapper">

		<div class="authHeader">
			<h1 class="projectName">Iot Remote Laboratory</h1>
			<div class="authTitleWrapper">
				<span class="authTitle">Log In</span>
				<span class="authDescription">Welcome back! Please enter your details.</span>
			</div>
		</div>

		<EditForm class="authForm" Model="@data" OnSubmit="@Submit">
			<div class="authFormField">
				<label class="fieldLabel">Email</label>
				<InputText class="authInput" id="email" @bind-Value="data.Email" />
				<ValidationMessage For="@(() => data.Email)" />
			</div>

			<div class="authFormField">
				<label class="fieldLabel">Login</label>
				<InputText class="authInput" id="email" @bind-Value="data.Login" />
				<ValidationMessage For="@(() => data.Login)" />
			</div>

			<div class="authFormField">
				<label class="fieldLabel">Password</label>

				<InputText class="authInput" id="email" @bind-Value="data.Password" />
				<ValidationMessage For="@(() => data.Password)" />
			</div>

			<button class="signinBtn" type="submit">Create account</button>

			<div class="signupWrapper">
				<span class="text">Already have an account?</span>
				<a href="#" class="link">Log In</a>
			</div>
		</EditForm>
	</div>
</div>

@code {
    private RegistrationUserData data = new();

    [Inject]
    private IAuthService _authService { get; set; }

    async void Submit()
    {
        var response = await _authService.Register(data.Login, Regex.Replace(data.Email, @"\s+", ""), data.Password);
    }
}
