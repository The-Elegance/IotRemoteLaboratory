@page "/Account/Login"
@attribute [AllowAnonymous]

@using IotRemoteLab.Application.User.Dtos
@using IotRemoteLab.Blazor.Models
@using IotRemoteLab.Blazor.Services
@using System.Text.RegularExpressions

@layout AuthorizationLayout

@inject NavigationManager _navigation;
@inject AuthService _authService;

<div class="auth-container">
    <div class="auth-wrapper">
        <div class="auth-header">
            <h1 class="project-name">Iot Remote Laboratory</h1>
            <div class="authTitleWrapper">
                <span class="authTitle">Log In</span>
                <span class="authDescription">Welcome back! Please enter your details.</span>
            </div>
        </div>

        <EditForm Model="@data" OnSubmit="Submit">
            <DataAnnotationsValidator />

            <div class="authFormField margin-bottom-28px">
                <label class="fieldLabel">Login</label>
                <InputText class="authInput" id="email" @bind-Value="data.Email" />
                <ValidationMessage For="@(() => data.Email)" />
            </div>

            <div class="authFormField margin-bottom-28px">
                <label class="fieldLabel">Password</label>
                <InputText class="authInput" id="email" @bind-Value="data.Password" />
                <ValidationMessage For="@(() => data.Password)" />
            </div>

            <button class="default-button margin-bottom-28px" type="submit">Sign In</button>
			@* <button class="ghost-button margin-bottom-28px" type="submit">Sign In with Urfu</button> *@

            <div class="signupWrapper">
                <span class="text">Not a member?</span>
                <a href="/signup" class="link">Create an account</a>
            </div>

        </EditForm>
    </div>
</div>


@code {
    AuthorizationUserData data = new();

    [SupplyParameterFromQuery(Name = "returnUrl")]
    string? _returnUrl { get; set; } = string.Empty;

    async void Submit()
    {
        var response = await _authService.Login(Regex.Replace(data.Email, @"\s+", ""), data.Password);
        if (response)
        {
            _navigation.NavigateTo(_returnUrl, true);
        }
    }
}