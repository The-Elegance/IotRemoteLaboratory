// <auto-generated />
using System;
using IotRemoteLab.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IotRemoteLab.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241203075703_University")]
    partial class University
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IotRemoteLab.Domain.AcademyGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AcademyGroup");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Role.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Schedule.ScheduleBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HolderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Schedule");

                    b.HasDiscriminator().HasValue("ScheduleBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Stand.Benchboards.Benchboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Benchboards");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Stand.Benchboards.BenchboardPort", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BenchboardId")
                        .HasColumnType("bigint");

                    b.Property<string>("McuPort")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RaspberryPiPort")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BenchboardId");

                    b.ToTable("BenchboardPort");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Stand.Mcu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AssemblyScriptFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeployScriptFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FrameworkId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FrameworkId");

                    b.ToTable("Mcus");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Stand.McuFramework", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CodeFileExtension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("McuFrameworks");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Stand.Stand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BenchboardId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CodeEditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasBenchboard")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasLighting")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSerialPort")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasWebcam")
                        .HasColumnType("boolean");

                    b.Property<long>("LightingBrightnessLevel")
                        .HasColumnType("bigint");

                    b.Property<long>("LightingRaspberryPiPort")
                        .HasColumnType("bigint");

                    b.Property<long>("McuId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialPortSpeed")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WebcamUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BenchboardId");

                    b.HasIndex("McuId");

                    b.ToTable("Stands");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Stand.Uart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Index")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Uart");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AcademyGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AcademyGroupId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("ScheduleStand", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<long>("StandId")
                        .HasColumnType("bigint");

                    b.HasKey("ScheduleId", "StandId");

                    b.HasIndex("StandId");

                    b.ToTable("ScheduleStand");
                });

            modelBuilder.Entity("StandUart", b =>
                {
                    b.Property<long>("StandId")
                        .HasColumnType("bigint");

                    b.Property<long>("UartId")
                        .HasColumnType("bigint");

                    b.HasKey("StandId", "UartId");

                    b.HasIndex("UartId");

                    b.ToTable("StandUart");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("UniversityAcademyGroup", b =>
                {
                    b.Property<Guid>("AcademyGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid");

                    b.HasKey("AcademyGroupId", "UniversityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("UniversityAcademyGroup");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Schedule.TeamHolderSchedule", b =>
                {
                    b.HasBaseType("IotRemoteLab.Domain.Schedule.ScheduleBase");

                    b.HasIndex("HolderId");

                    b.HasDiscriminator().HasValue("TeamHolderSchedule");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Schedule.UserHolderSchedule", b =>
                {
                    b.HasBaseType("IotRemoteLab.Domain.Schedule.ScheduleBase");

                    b.HasIndex("HolderId");

                    b.HasDiscriminator().HasValue("UserHolderSchedule");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Stand.Benchboards.BenchboardPort", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.Stand.Benchboards.Benchboard", null)
                        .WithMany("Ports")
                        .HasForeignKey("BenchboardId");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Stand.Mcu", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.Stand.McuFramework", "Framework")
                        .WithMany()
                        .HasForeignKey("FrameworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Framework");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Stand.Stand", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.Stand.Benchboards.Benchboard", "Benchboard")
                        .WithMany()
                        .HasForeignKey("BenchboardId");

                    b.HasOne("IotRemoteLab.Domain.Stand.Mcu", "Mcu")
                        .WithMany()
                        .HasForeignKey("McuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Benchboard");

                    b.Navigation("Mcu");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.User", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.AcademyGroup", "AcademyGroup")
                        .WithMany("Users")
                        .HasForeignKey("AcademyGroupId");

                    b.HasOne("IotRemoteLab.Domain.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId");

                    b.Navigation("AcademyGroup");

                    b.Navigation("University");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.Role.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IotRemoteLab.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleStand", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.Schedule.ScheduleBase", null)
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ScheduleStand_Schedule");

                    b.HasOne("IotRemoteLab.Domain.Stand.Stand", null)
                        .WithMany()
                        .HasForeignKey("StandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ScheduleStand_Stand");
                });

            modelBuilder.Entity("StandUart", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.Stand.Stand", null)
                        .WithMany()
                        .HasForeignKey("StandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StandUart_Stand");

                    b.HasOne("IotRemoteLab.Domain.Stand.Uart", null)
                        .WithMany()
                        .HasForeignKey("UartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StandUart_Uart");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TeamUser_Team");

                    b.HasOne("IotRemoteLab.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TeamUser_User");
                });

            modelBuilder.Entity("UniversityAcademyGroup", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.AcademyGroup", null)
                        .WithMany()
                        .HasForeignKey("AcademyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UniversityAcademyGroup_AcademyGroup");

                    b.HasOne("IotRemoteLab.Domain.University", null)
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UniversityAcademyGroup_University");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Schedule.TeamHolderSchedule", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.Team", "Holder")
                        .WithMany()
                        .HasForeignKey("HolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holder");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Schedule.UserHolderSchedule", b =>
                {
                    b.HasOne("IotRemoteLab.Domain.User", "Holder")
                        .WithMany()
                        .HasForeignKey("HolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holder");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.AcademyGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("IotRemoteLab.Domain.Stand.Benchboards.Benchboard", b =>
                {
                    b.Navigation("Ports");
                });
#pragma warning restore 612, 618
        }
    }
}
