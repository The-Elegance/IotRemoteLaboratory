@page "/profile"


@using IotRemoteLab.Blazor.Services
@using IotRemoteLab.Blazor.Views.Pages.Profile.Components
@using IotRemoteLab.Blazor.Views.Pages.Profile.Components.Modal
@using IotRemoteLab.Domain
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.ComponentModel


<style>
    .profile {
        max-height: 100%;
        height: 100%;
    }

    .content {
        width: 100%;
        height: 100%;
    }

    .profile-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 10px;
    }

    .profile-events {
        background-color: dimgray;
        padding: 16px 24px;
    }

    .events-header {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 16px;
        color: #fff;
        margin-bottom: 10px;
    }

    .profile-team {
        padding: 16px 24px;
        background-color: #2c2c2c;
        border-radius: 10px;
    }

    .profile-content {
        height: calc(100% - 264px - 16px);
    }

    .profile-events {
        background-color: #2C2C2C;
        border-radius: 10px;
        height: 100%;
    }



    .team-header {
        display: grid;
        grid-template-columns: 1fr auto;
    }

    .team-header__title {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 16px;
        color: #fff;
    }

    .team-header__additional {
    }

    .team-members {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }
</style>


@if (_isLoading)
{
    <Spin Spinning />
}
else
{
    @if (_team != null && _user != null)
    {
        <AddTeamMemberModal OnOk="OnTeamMemberAdded" Team="@_team" UniversityId="@_user.UniversityId" @bind-Visible="_addTeamMemberVisible" />
    }
    else if (_team == null && _user != null)
    {
        <CreateTeamModal OnOk="OnTeamCreated" LeaderId="_user.Id" />
    }


    <div class="profile">
        <div class="profile-header">
            <div class="leftContent">
                <img src="" class="profilePic">
                <div class="profileInfo">
                    <span class="welcomeTitle">Добро пожаловать, <span class="userName">@($"{_user.Name} {_user.MiddleName}")</span></span>
                    <ul class="userInfo">
                        <li class="group">
                            <span>Ваша группа:</span>
                            <span class="value">@_academyGroup.Name</span>
                        </li>
                        <li class="role">
                            <span>Ваша роль:</span>
                            <span class="value">Студент</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="profile-content">

            <div class="profile-events">

                <div class="events-header">
                    События
                </div>

            </div>

            <div class="profile-team">

                @if (_team == null)
                {
                    <Button OnClick="() => { _createTeamVisible = true; }">Создать команду</Button>
                }
                else
                {
                    <div class="team-header">
                        <div class="team-header__title">
                            Ваша команда: @_team.Name
                        </div>

                        <div class="team-header__additional">
                            @if (_team.Members.Count < 5)
                            {
                                <Tooltip Title="Добавить участников">
                                    <Button OnClick="OpenAddTeamMember" Type="@ButtonType.Primary" Shape="@ButtonShape.Circle" Icon="@IconType.Outline.UserAdd" />
                                </Tooltip>
                            }
                        </div>
                    </div>

                    <div class="team-members">

                        @foreach (var member in _team.Members)
                        {
                            <TeamMember Member="member" />
                        }
                    </div>
                }
            </div>

        </div>
    </div>
}


@code
{
    bool _isLoading;
    bool _addTeamMemberVisible;
    bool _createTeamVisible;

    User? _user;
    AcademyGroup? _academyGroup;
    Team _team;


    [Inject]
    public UserContext _context { get; set; }
    [Inject]
    public HttpClient _httpClient { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _isLoading = true;

        _user = await _context.GetUserProfileAsync();
        _academyGroup = await _httpClient.GetFromJsonAsync<AcademyGroup?>($"university/academygroup/{_user.AcademyGroupId}");
        _team = await _httpClient.GetFromJsonAsync<Team?>($"user/{_user.Id}/team");

        _isLoading = false;
    }


    void OnTeamMemberAdded(User user)
    {
        _team.Members.Add(user);
        StateHasChanged();
    }

    void OnTeamCreated(Team team)
    {
        _team = team;
        StateHasChanged();
    }

    void OpenAddTeamMember()
    {
        _addTeamMemberVisible = true;
    }
}