@page "/addStand"
@layout AdminPanelLayout
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject HttpClient _httpClient



@using Radzen
@using Radzen.Blazor
@using IotRemoteLab.Domain.Stand
@using IotRemoteLab.Domain.Stand.Benchboards
@using static IotRemoteLab.Blazor.Pages.AdminPanel.ListStand
@using System.Collections

<h1>AddStand</h1>


<RadzenTemplateForm Data="@stand">

    <RadzenFieldset Text="Добавить стенд">

        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenLabel Text="Микроконтроллер" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="5">
                <RadzenDropDown Data="@mcu" TextProperty="Name" Name="Name" @bind-Value=@selectedMcu Style="width: 100%; max-width: 500px;"></RadzenDropDown>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="1">
                <RadzenButton Text="Создать стенд" ButtonStyle="ButtonStyle.Secondary" Click=@OpenFormNewMcu />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenLabel Text="Фреймворк" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="5">
                <RadzenDropDown Data="@fram" TextProperty="Name" Name="Name" @bind-Value=@selectedFram Style="width: 100%; max-width: 500px;"></RadzenDropDown>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="1">
                <RadzenButton Text="Создать фреймворк" ButtonStyle="ButtonStyle.Secondary" Click=@OpenNewFramForm />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenLabel Text="URL Стенда" Component="Url" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="5">
                <RadzenTextBox Name="url" @bind-Value="@stand.Url" Style="width: 100%; max-width: 500px;" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenLabel Text="Стендовая плата" Component="Stand" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="5">
                <RadzenToggleButton @bind-Value=@valueStand Shade="Shade.Light" Text="@(valueStand ? "True" : "False" )" ButtonStyle="ButtonStyle.Primary"
                                    ToggleButtonStyle="ButtonStyle.Light" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "False" }})" />
            </RadzenColumn>
        </RadzenRow>
        @if (valueStand == true)
        {
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Стендовая плата2" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="5">
                    <RadzenDropDown Data="@stendPl" TextProperty="Name" Name="Name" @bind-Value=@selectedBench Style="width: 100%; max-width: 500px;"></RadzenDropDown>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="1">
                    <RadzenButton Text="Клак" ButtonStyle="ButtonStyle.Secondary" Click=@OpenFormNewBench /> 
                </RadzenColumn>
            </RadzenRow>
        }

        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenLabel Text="подсветка стенда" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="5">
                <RadzenToggleButton @bind-Value=@valueLightStand Shade="Shade.Light" Text="@(valueLightStand ? "True" : "False" )" ButtonStyle="ButtonStyle.Primary"
                                    ToggleButtonStyle="ButtonStyle.Light" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "False" }})" />
            </RadzenColumn>
        </RadzenRow>
        @if (valueLightStand == true)
        {
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="подсветка стенда2-ШИМ" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="5">
                    <RadzenNumeric Min="1" Max="10" @bind-Value=@stand.LigthingRaspberryPiPort InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="подсветка стенда3-число" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="5">
                    <RadzenNumeric Min="1" Max="10" @bind-Value=@stand.LigthingBrightnessLevel InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
                </RadzenColumn>
            </RadzenRow>
        }

        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenLabel Text="последовательный порт" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="5">
                <RadzenToggleButton @bind-Value=@valuePort Shade="Shade.Light" Text="@(valuePort ? "True" : "False" )" ButtonStyle="ButtonStyle.Primary"
                                    ToggleButtonStyle="ButtonStyle.Light" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "False" }})" />
            </RadzenColumn>
        </RadzenRow>
        @if (valuePort == true)
        {
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="последовательный порт2" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="5">
                    <RadzenNumeric Min="1" Max="10" @bind-Value=@stand.SerialPortSpeed InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
                </RadzenColumn>
            </RadzenRow>
        }

        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenLabel Text="веб камера" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="5">
                <RadzenToggleButton @bind-Value=@valueVebCamera Shade="Shade.Light" Text="@(valueVebCamera ? "True" : "False" )" ButtonStyle="ButtonStyle.Primary"
                                    ToggleButtonStyle="ButtonStyle.Light" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "False" }})" />
            </RadzenColumn>
        </RadzenRow>
        @if (valueVebCamera == true)
        {
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Ссылка на трансляцию" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="5">
                    <RadzenTextBox @bind-Value="@stand.WebcamUrl" Style="width: 100%; max-width: 500px;" />
                </RadzenColumn>
            </RadzenRow>
        }

    </RadzenFieldset>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save" Click="@Submit" />
    </RadzenStack>
</RadzenTemplateForm>

@code {
    Stand stand = new();

    bool valueStand = false;
    bool valueLightStand = false;
    bool valuePort = false;
    bool valueVebCamera = false;

    private Mcu selectedMcu = new() { Name = ""}; 
    public static List<Mcu> mcu = new List<Mcu>()
    {
       new Mcu() {Name = "test"}
    };

    private McuFramework selectedFram =  new() { Name = ""};
    public static List<McuFramework> fram = new()
    {
        new McuFramework() {Name = "testPattern"}
    };

    private Benchboard selectedBench;
    public static List<Benchboard> stendPl = new List<Benchboard>()
    {
        new Benchboard() {Name = "Плата1",},
        new Benchboard() {Name = "Плата2"}
    };

    async void Submit()
    {
        stand.Benchboard = selectedBench;
        stand.Mcu = selectedMcu;
        stand.Benchboard = selectedBench;

        var res = await  _httpClient.PostAsJsonAsync<Stand>("/api/Stands", stand);
        Console.WriteLine(res.Content);
    }

    void Cancel()
    {
    //
    }

    void UrlTextBoxChanged(string newValue)
    {
        stand.Url = newValue;
    }

    private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "ToggleButton Clicked", Detail = text });
    }

    public async Task OpenFormNewBench()
    {
        await DialogService.OpenAsync<NewBenchForm>($"Создание новой платы",
               new Dictionary<string, object>(),
               new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }

    public async Task OpenNewFramForm()
    {
        await DialogService.OpenAsync<NewFrameworkForm>($"Создать фреймворк",
               new Dictionary<string, object>(),
               new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }

    public async Task OpenFormNewMcu()
    {
        await DialogService.OpenAsync<NewMcuForm>($"Создать новый фреймворк",
               new Dictionary<string, object>(),
               new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }
}
