@using IotRemoteLab.Blazor.Services
@using IotRemoteLab.Blazor.Views.Pages.Profile.Components
@using IotRemoteLab.Domain
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.ComponentModel

@page "/profile"


<style>
    .profile {
        max-height: 100%;
        height: 100%;
    }

    .accountBioAccountHeader {
        margin-bottom: 10px;
    }

    .content {
        width: 100%;
        height: 100%;
    }

    .profile-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 10px;
    }

    .profile-events {
        background-color: dimgray;
        padding: 16px 24px;
    }

    .events-header {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 16px;
        color: #fff;
        margin-bottom: 10px;
    }

    .profile-team {
        padding: 16px 24px;
        background-color: #2c2c2c;
        border-radius: 10px;
    }

    .team__header {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 16px;
        color: #fff;
    }

    .team__members {
        gap: 10px;
    }

    .profile-content {
        height: calc(100% - 264px - 16px);
    }

    .profile-events {
        background-color: #2C2C2C;
        border-radius: 10px;
        height: 100%;
    }

</style>

@if (_user != null)
{
    <div class="profile">
        <div class="accountBioAccountHeader">
            <div class="leftContent">
                <img src="" class="profilePic">
                <div class="profileInfo">
                    <span class="welcomeTitle">Добро пожаловать, <span class="userName">@($"{_user.Name} {_user.MiddleName}")</span></span>
                    <ul class="userInfo">
                        <li class="group">
                            <span>Ваша группа:</span>
                            <span class="value">@_academyGroup.Name</span>
                        </li>
                        <li class="role">
                            <span>Ваша роль:</span>
                            <span class="value">Студент</span>
                        </li>
                        <li class="mailContact">
                            <span>Почта:</span>
                            <span class="value">@_user.Email</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="profile-content">

            <div class="profile-events">
                
                <div class="events-header">
                    События
                </div>

            </div>

            <div class="profile-team">
                <div class="team__header">Ваша команда: TeamName</div>

                <div class="team__members">

                    <TeamMember />
                    <TeamMember />
                    <TeamMember />

                </div>
            </div>

        </div>
    </div>
}
else
{
    <Spin Spinning />
}


@code
{
    User? _user;
    AcademyGroup? _academyGroup;
    [Inject]
    public UserContext _context { get; set; }
    [Inject]
    public HttpClient _httpClient { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _user = await _context.GetUserProfileAsync();
        _academyGroup = await _httpClient.GetFromJsonAsync<AcademyGroup?>($"university/academygroup/{_user.AcademyGroupId}");
    }
}