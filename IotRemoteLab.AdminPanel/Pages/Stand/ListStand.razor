@page "/ListStand"

@using System.ComponentModel.DataAnnotations
@using System.Text.Json;
@using IotRemoteLab.Common.Components.Form
@using IotRemoteLab.Domain.Stand
@using IotRemoteLab.Domain.Stand.Benchboards

@inject ModalService _modalService
@inject ConfirmService ComfirmService;
@inject HttpClient _httpClient

<h1>Список всех стендов</h1>

@* Таблица всех стендов *@

<Table @ref="_standTable" TItem="Stand" PageSize="5" Total="_total" DataSource="_stands" @bind-SelectedRows="_selectedRows">
    <TitleTemplate>
        <Flex Justify="end" Gap="10">
            <Button Type="primary" OnClick="@ShowModalNew">New</Button>
            <Button Disabled="!_selectedRows.Any()" Danger OnClick="@ShowModalDeleteAll">Delete</Button>
        </Flex>
    </TitleTemplate>
    <ColumnDefinitions Context="row">
        <Selection />
        <GenerateColumns Definitions="@definitions" HideColumnsByName="@(new []{"Framework", "Benchboard", "HasSerialPort", "SerialPortSpeed", "HasWebcam", "HasWebcam", "WebcamUrl", "AvailableUarts", "CodeEditorId"})" />
        <ActionColumn Title="Action">
            <a @onclick="() => StartEdit(row)">Edit</a>
        </ActionColumn>
    </ColumnDefinitions>
</Table>

 @* Модалка для удаления по кнопке сверху таблицы *@

<Modal Title="@("Confirm")"
       Visible="@_visibleFlagDeleteAll"
       OnOk="@HandleOkDeleteAll"
       OnCancel="@HandleCancelDeleteAll">
    <p>@_modalTextDeleteAll</p>
</Modal>

@* Модалка и форма для создания нового элемента *@

<Modal Title="@("New")" style="width: 600px"
       @bind-Visible="@_visibleNew"
       OnOk="@HandleOkNew"
       OnCancel="@HandleCancelNew">

    <Form Model="@modelNew"
          @ref="@_formNew">
        <IotFormGroup Bordered="false">

            <IotFormItem Label="Mcu">
                <Select Mode="default"
                        DataSource="@_mcus"
                        @bind-Value="@context.Mcu"
                        LabelName="@nameof(Mcu.Name)">
                </Select>
            </IotFormItem>

            <IotFormItem Label="Url">
                <Input @bind-Value="@context.Url" />
            </IotFormItem>

            <IotFormItem Label="HasBenchboard">
                <Switch @bind-Value="@context.HasBenchboard" />
            </IotFormItem>

            @if (context.HasBenchboard == true)
            {
                <IotFormItem Label="Benchboard">
                    <Select Mode="default"
                            DataSource="@_benches"
                            @bind-Value="@context.Benchboard"
                            LabelName="@nameof(Benchboard.Name)">
                    </Select>
                </IotFormItem>
            }
            else
            {
                context.Benchboard = null;
            }

            <IotFormItem Label="HasLighting">
                <Switch @bind-Value="@context.HasLighting" />
            </IotFormItem>

            @if (context.HasLighting == true)
            {
                <IotFormItem Label="LightingBrightnessLevel">
                    <AntDesign.InputNumber @bind-Value="@context.LightingBrightnessLevel" />
                </IotFormItem>
                <IotFormItem Label="LightingRaspberryPiPort">
                    <AntDesign.InputNumber @bind-Value="@context.LightingRaspberryPiPort" />
                </IotFormItem>
            }
            else
            {
                context.LightingBrightnessLevel = 0;
                context.LightingRaspberryPiPort = 0;
            }

            <IotFormItem Label="HasSerialPort">
                <Switch @bind-Value="@context.HasSerialPort" />
            </IotFormItem>

            @if (context.HasSerialPort == true)
            {
                <IotFormItem Label="SerialPortSpeed">
                    <AntDesign.InputNumber @bind-Value="@context.SerialPortSpeed" />
                </IotFormItem>
            }
            else
            {
                context.SerialPortSpeed = 0;
            }

            <IotFormItem Label="HasWebcam" Required>
                <Switch @bind-Value="@context.HasWebcam" />
            </IotFormItem>

            @if (context.HasWebcam == true)
            {
                <IotFormItem Label="WebcamUrl">
                    <Input @bind-Value="@context.WebcamUrl" />
                </IotFormItem>
            }
            else
            {
                context.WebcamUrl = "";
            }
        </IotFormGroup>
    </Form>
</Modal>

@* Модалка и форма для редактирования элемента *@

<Modal Title="@("Edit")" style="width: 600px;"
       @bind-Visible="@_visibleEdit"
       OnOk="@HandleOkEdit"
       OnCancel="HandleCancelEdit">

    <Form Model="@modelEdit"
          @ref="@_formEdit">
        <IotFormGroup Bordered="false">

            <IotFormItem Label="Mcu">
                <Select Mode="default"
                        DataSource="@_mcus"
                        @bind-Value="@context.Mcu"
                        LabelName="@nameof(Mcu.Name)">
                </Select>
            </IotFormItem>

            <IotFormItem Label="Url">
                <Input @bind-Value="@context.Url" />
            </IotFormItem>

            <IotFormItem Label="HasBenchboard">
                <Switch @bind-Value="@context.HasBenchboard" />
            </IotFormItem>

            @if (context.HasBenchboard == true)
            {
                <IotFormItem Label="Benchboard">
                    <Select Mode="default"
                            DataSource="@_benches"
                            @bind-Value="@context.Benchboard"
                            LabelName="@nameof(Benchboard.Name)">
                    </Select>
                </IotFormItem>
            }

            <IotFormItem Label="HasLighting">
                <Switch @bind-Value="@context.HasLighting" />
            </IotFormItem>

            @if (context.HasLighting == true)
            {
                <IotFormItem Label="LightingBrightnessLevel">
                    <AntDesign.InputNumber @bind-Value="@context.LightingBrightnessLevel" />
                </IotFormItem>
                <IotFormItem Label="LightingRaspberryPiPort">
                    <AntDesign.InputNumber @bind-Value="@context.LightingRaspberryPiPort" />
                </IotFormItem>
            }

            <IotFormItem Label="HasSerialPort">
                <Switch @bind-Value="@context.HasSerialPort" />
            </IotFormItem>

            @if (context.HasSerialPort == true)
            {
                <IotFormItem Label="SerialPortSpeed">
                    <AntDesign.InputNumber @bind-Value="@context.SerialPortSpeed" />
                </IotFormItem>
            }

            <IotFormItem Label="HasWebcam" Required>
                <Switch @bind-Value="@context.HasWebcam" />
            </IotFormItem>

            @if (context.HasWebcam == true)
            {
                <IotFormItem Label="WebcamUrl">
                    <Input @bind-Value="@context.WebcamUrl" />
                </IotFormItem>
            }
        </IotFormGroup>
    </Form>
</Modal>

@code
{
    List<Stand> _stands = new();
    List<Benchboard> _benches = new ();
    List<McuFramework> _frams = new ();
    List<Mcu> _mcus = new();

    List<Stand> mockDb = new();
    IEnumerable<Stand> _selectedRows = [];
    ITable _standTable;
    int _total;

    bool _visibleFlagDeleteAll = false;
    string _modalTextDeleteAll = "";

    bool _visibleFlagDelete = false;
    string _modalTextDelete = "";

    bool _visibleNew = false;
    private Form<Stand> _formNew;
    public Stand modelNew = new Stand();

    bool _visibleEdit = false;
    private Form<Stand> _formEdit;
    public Stand modelEdit = new Stand();

    protected override Task OnInitializedAsync() => UpdateList();

    async Task UpdateList()
    {
        _stands = await _httpClient.GetFromJsonAsync<List<Stand?>>("api/v1/stands");

        _benches = await _httpClient.GetFromJsonAsync<List<Benchboard?>>("api/Benchboards");

        _mcus = await _httpClient.GetFromJsonAsync<List<Mcu?>>("api/Mcu");
    }

    private void ShowModalDeleteAll()
    {
        _visibleFlagDeleteAll = true;
        _modalTextDeleteAll = $"Are you sure delete {_selectedRows.Count()} rows?";
    }

    private async Task HandleOkDeleteAll(MouseEventArgs e)
    {
        mockDb = mockDb.Except(_selectedRows).ToList();
        _selectedRows = [];
        _standTable.ReloadData();
        _visibleFlagDeleteAll = false;
    }

    private void HandleCancelDeleteAll(MouseEventArgs e)
    {
        _visibleFlagDeleteAll = false;
    }

    private void ShowModalNew()
    {
        _visibleNew = true;
    }

    private void StartEdit(Stand row)
    {
        _visibleEdit = true;
        modelEdit = row;
    }

    private Stand test = new Stand
    {
        Mcu = new Mcu { Id = 2, Name = "STM32L1512", Framework = new McuFramework { Id = 2, Name = "STM322", CodeFileName = "0", CodeFileExtension = "0", Pattern = "0" }, AssemblyScriptFile = "0", DeployScriptFile = "0" },
        Url = "0",
        HasBenchboard = true,
        Benchboard = new Benchboard { Id = 2, Name = "Stand2" },
        HasLighting = true,
        LightingBrightnessLevel = 1,
        LightingRaspberryPiPort = 1,
        HasSerialPort = true,
        SerialPortSpeed = 1,
        HasWebcam = true,
        WebcamUrl = "0",
        AvailableUarts = new List<Uart> { }
    };

    async Task HandleOkNew(MouseEventArgs e)
    {
        // mockDb.Add(modelNew);
        await _httpClient.PostAsJsonAsync<Stand>("api/v1/stands", modelNew);
        _standTable.ReloadData();
        Console.WriteLine("OK");
        _formNew.Submit();
    }

    private async Task HandleOkEdit(MouseEventArgs e)
    {
        _standTable.ReloadData();
        _formNew.Submit();
    }

    private void HandleCancelNew(MouseEventArgs e)
    {
        Console.WriteLine(e);
    }

    private void HandleCancelEdit(MouseEventArgs e)
    {
        Console.WriteLine(e);
    }

    private void OnFinishNew(EditContext editContext)
    {
        _visibleNew = false;
    }

    private void OnFinishEdit(EditContext editContext)
    {
        _visibleEdit = false;
    }

    void definitions(string propertyName, IFieldColumn column)
    {
        if (propertyName == "Mcu")
        {
            var tagCol = ((Column<Mcu>)column);

            tagCol.CellRender = cellData =>
            @<span>
                @{
                    var value = cellData.FieldValue;
                 }

                <Tag>@value.Name</Tag>
            </span>
            ;
            return;
        }

        column.Sortable = true;
        column.Filterable = true;
    }

    protected override void OnInitialized()
    {
        mockDb = Enumerable.Range(0, _stands.Count).Select(i => _stands[i]).ToList();
    }
}
